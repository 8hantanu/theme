// ------------------- FONTS ------------------- //
@import url('https://fonts.googleapis.com/css2?family=JetBrains+Mono:ital,wght@0,100..800;1,100..800&family=Noto+Emoji:wght@300..700&display=swap');

// ------------------- VARIABLES ------------------- //
$font-family: "JetBrains Mono", monospace;
$line-height: 1ch;
$border-thickness: 0.2ch;
$text-color: black;
$text-color-alt: dimgrey;
$background-color: white;
$background-color-alt: lightgrey;
$link-color: blue;

$font-weight-normal: 400;
$font-weight-medium: 600;
$font-weight-bold: 800;

$spacing-base: 1ch;
$max-width: calc(min(80ch, round(down, 100%, 1ch)));
$grid-gap: 1ch;

// ------------------- THEME SWITCHER ------------------- //
@mixin dark-appearance {
  filter: invert(1) hue-rotate(180deg);

  img {
    filter: inherit;

    &.ioda {
      filter: invert(0);
    }
  }
}

html[a="dark"], body[a="dark"] {
  @include dark-appearance;
}

@media (prefers-color-scheme: dark) {
  html[a="auto"], body[a="auto"] {
    @include dark-appearance;
  }
}

// ------------------- GENERAL STYLES ------------------- //
* {
  box-sizing: border-box;
}

html {
  height: 100%;
}

html, body {
  background: $background-color;
}

body {
  color: $text-color;
  font-family: $font-family;
  font-size: 16px;
  line-height: 1.4;
  margin: 0;
  display: flex;
  flex-direction: column;
  min-height: 100vh;
}

a {
  text-decoration: none;
  color: $link-color;

  &:hover {
    text-decoration: underline;
  }
}

// ------------------- TYPOGRAPHY ------------------- //
h2, h3, h4, h5, h6 {
  margin-top: $spacing-base * 2;
}

p, li {
  margin: $spacing-base 0;
  word-break: break-word;
  hyphens: auto;
}

.post-meta {
  text-align: right;
}

blockquote {
  border-left: $border-thickness solid $text-color;
  padding: $spacing-base;
  margin: 0;

  p { margin: 0; }
}

// ------------------- LAYOUT & SPACING ------------------- //
.w {
  max-width: $max-width;
  margin: 0 auto;
}

.content {
  flex: 1;
  padding: $spacing-base;
}

footer {
  flex-shrink: 0;
  padding: 0 $spacing-base $spacing-base;
}

// ------------------- FORMS ------------------- //
input, button, textarea {
  border: $border-thickness solid $text-color;
  padding: $line-height;
  margin: 0;
  font: inherit;
  line-height: normal;
  width: auto;
}

input {
  width: calc(round(down, 100%, 1ch));
}

::placeholder {
  color: $text-color-alt;
  opacity: 1;
}

button, input:focus {
  outline: none;
}

button {
  text-transform: uppercase;
  font-weight: $font-weight-medium;
  cursor: pointer;
  background: $background-color;

  &:hover {
    background: $background-color-alt;
  }

  &:active {
    transform: translate(0.2ch, 0.2ch);
  }
}

// ------------------- CODE & TABLES ------------------- //
code {
  color: $text-color;
  background: $background-color-alt;
  padding: $line-height / 8;
}

div.highlighter-rouge code {
  border: $border-thickness solid $text-color;
  display: block;
  overflow-x: auto;
  padding: $spacing-base;
}

pre {
  white-space: pre;
  overflow-x: auto;
  margin: $line-height 0;
}

table {
  width: 100%;
  border-collapse: collapse;
  
  th, td {
    border: $border-thickness solid $text-color;
    padding: $line-height;
  }
}

// ------------------- DETAILS ------------------- //
details {
  border: $border-thickness solid $text-color;
  padding: 1ch;
  margin-bottom: $line-height;
}

summary {
  cursor: pointer;
}

details[open] summary {
  margin-bottom: $line-height;
}

details ::marker {
  display: inline-block;
  content: '▶';
  margin: 0;
}

details[open] ::marker {
  content: '▼';
}

details :last-child {
  margin-bottom: 0;
}

// ------------------- IFRAME ------------------- //
iframe {
  border: none;
  padding: 1ch;
  width: 100%;
}

iframe:focus {
  outline: none;
}

iframe[allowfullscreen] {
  display: block;
}

iframe[loading="lazy"] {
  opacity: 0;
  transition: opacity 0.3s ease-in-out;

  &:loaded {
    opacity: 1;
  }
}

// ------------------- GRID SYSTEM ------------------- //

.grid {
  display: flex;
  gap: $grid-gap;
  margin-bottom: $line-height;
  width: calc(100% - ($grid-gap * (var(--grid-cells) - 1)));

  > *, input {
    flex: 0 0 calc((100% - ($grid-gap * (var(--grid-cells) - 1))) / var(--grid-cells));
  }

  @for $i from 1 through 9 {
    &:has(> :last-child:nth-child(#{$i})) {
      --grid-cells: #{$i};
    }
  }
}
